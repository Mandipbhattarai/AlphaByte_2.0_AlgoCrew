# -*- coding: utf-8 -*-
"""Ransomware_ModelTrainer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zNpzXwuSCuOYda1Nk7bxcVZ3nFj2rJGe
"""

from sklearn.model_selection import train_test_split ,StratifiedKFold,cross_val_score
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix,accuracy_score
from mlxtend.plotting import plot_confusion_matrix
from sklearn.tree import plot_tree

df = pd.read_csv('data_file.csv')
df.sample(10)

df.info()

df.drop(['FileName','md5Hash'], axis=1, inplace=True)

df['Benign'].value_counts()

df = df.drop(df[df['Benign'] == 0].sample(6000).index)

sns.countplot(x=df['Benign'], data=df)
plt.title('Benign Label Distribution')
plt.xlabel('Benign Label')
plt.ylabel('Count')
plt.show()

X = df.iloc[:,:-1]
y = df['Benign']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Define the cross-validation strategy
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# Create a Random Forest Classifier with 64 trees
rf = RandomForestClassifier(n_estimators=64, random_state=42)

# Perform cross-validation on the training set
cv_scores = cross_val_score(rf, X_train, y_train, cv=cv, scoring='accuracy')

# Train the model on the entire training set
rf.fit(X_train, y_train)

# Predict the classes of the testing set
y_pred = rf.predict(X_test)

# Print cross-validation scores and the mean accuracy
print("Cross-validation scores:", cv_scores)
print("Mean cross-validation accuracy:", np.mean(cv_scores))

# Print the test accuracy
print("Test set accuracy:", accuracy_score(y_test, y_pred))

cm=confusion_matrix(y_test, y_pred)

print("\n Classification Report:")
print(classification_report(y_test, y_pred))

fig, ax = plot_confusion_matrix(conf_mat=cm , figsize=(6, 6), cmap=plt.cm.Greens)
plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix', fontsize=18)
plt.show()

X_new = [[34404, 56, 524088, 0, 5, 0, 0, 0, 11, 0, 4, 0, 33088, 1080,0],[
    332, 0, 0, 6, 10, 390992, 100, 0, 7, 0, 3, 0, 0, 1620, 0]]
# Use the model to predict the classes of the new data
y_pred = rf.predict(X_new)

# Print the predicted classes of the new data
print("Predicted classes:", y_pred)

import joblib
joblib.dump(rf, "random_forest_model.pkl")
loaded_model = joblib.load("random_forest_model.pkl")